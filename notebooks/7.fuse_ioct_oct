{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5507abea-50d3-450d-8c2c-00ce8e778393",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "os.chdir('/home/extra/micheal/dd_synthesis')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5864a4b-dae3-4a65-9b36-3bbc83cb6902",
   "metadata": {},
   "source": [
    "# Preicise cut and paste"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ec61e5a9-1ad9-41f7-9b61-b8c7797e09df",
   "metadata": {},
   "outputs": [],
   "source": [
    "# pip install opencv-python\n",
    "from collections import namedtuple\n",
    "from glob import glob\n",
    "import cv2 as cv\n",
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "from PIL import Image\n",
    "from utils.visualization import visualize_segmentation, plot_horizontal\n",
    "from utils.mask import expand_label, get_dst_shadow"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fabea288-dab8-4f05-a33b-605f2523f623",
   "metadata": {
    "tags": []
   },
   "source": [
    "### Randomly choose source and target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9c7eab6c-5637-40da-b68e-174d40483399",
   "metadata": {},
   "outputs": [],
   "source": [
    "Label = namedtuple(\"Label\", \"instrument mirror ilm ipl pre bm\", defaults=(None,)*6)\n",
    "unified_label = Label(instrument=1, mirror=2, ilm=3, ipl=4, pre=5, bm=6)\n",
    "aroi_label = Label(ilm=19, ipl=57, pre=171, bm=190)\n",
    "op_label = Label(instrument=2, mirror=4, ilm=1, pre=3)\n",
    "\n",
    "def unify_label(label, src_labels, dst_labels, remove_list=[]):\n",
    "    \"\"\"Transform values in label from src_labels to dst_labels.\n",
    "    It will return a new label. The original label will be left untouched.\n",
    "    Args:\n",
    "        label (numpy array)\n",
    "        src_labels (namedtuple(Label))\n",
    "        dst_labels (namedtuple(Label))\n",
    "        remove_list (list(int)): all labels in this list will be set to 0\n",
    "    \"\"\"\n",
    "    label_copy = label.copy()\n",
    "    for l in Label._fields:\n",
    "        s_label = getattr(src_labels, l)\n",
    "        d_label = getattr(dst_labels, l)\n",
    "        if s_label is not None and d_label is not None:\n",
    "            label_copy[label == s_label] = d_label\n",
    "    for l in remove_list:\n",
    "        label_copy[label == l] = 0\n",
    "    return label_copy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2809c9ed-8247-4a9f-830e-69d8c2273510",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_bscan_label(img_name, bscan_prefix=\"data/ioct/bscans/val/\", label_prefix=\"data/ioct/labels/val/\"):\n",
    "    bscan = Image.open(bscan_prefix + img_name)\n",
    "    label = np.asarray(Image.open(label_prefix + img_name))\n",
    "    return bscan, label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "95dfd5f5-4b2e-4f3c-9cb4-de9ebb61a24d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_crossover(src_bscan, src_label, dst_bscan, dst_label, mask):\n",
    "    cross_bscan = dst_bscan.copy()\n",
    "    cross_bscan[mask] = src_bscan[mask]\n",
    "    cross_label = dst_label.copy()\n",
    "    cross_label[mask] = src_label[mask]\n",
    "    return cross_bscan, cross_label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8fd7f4c9-2f2c-4254-9d5e-ed443e9d053b",
   "metadata": {},
   "outputs": [],
   "source": [
    "bscan_prefix = \"data/ioct/bscans/val/\"\n",
    "label_prefix = \"data/ioct/labels/val/\"\n",
    "img_name = \"5d396575-e039-49da-a219-fe239e8bd9c88062-101.png\"\n",
    "\n",
    "bscan, label = get_bscan_label(img_name, bscan_prefix, label_prefix)\n",
    "label=unify_label(label, src_labels=op_label, dst_labels=unified_label)\n",
    "visualize_segmentation(bscan, label, show_original=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2ad7e67d-603a-4ed6-88f8-a3ada38cfd26",
   "metadata": {},
   "outputs": [],
   "source": [
    "dst_bscan_prefix = \"data/aroi/bscans/train/\"\n",
    "dst_label_prefix = \"data/aroi/labels/train/\"\n",
    "dst_img_name = \"patient21_raw0060.png\"  # \"patient15_raw0032.png\"\n",
    "dst_bscan, dst_label = get_bscan_label(dst_img_name, dst_bscan_prefix, dst_label_prefix)\n",
    "dst_label = unify_label(dst_label, src_labels=aroi_label, dst_labels=unified_label, remove_list=[80, 160, 240])\n",
    "visualize_segmentation(dst_bscan, dst_label, show_original=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fed6611c-b6e5-4924-8b83-dea46ae94752",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Part 1: Manipulate on the bscan\n",
    "\n",
    "The goal is the artifitially create a cross-over image."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "adf83e7a-e6d8-46ec-9819-f4c6594cf9cc",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true,
    "tags": []
   },
   "source": [
    "### Try edge detection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e0dd89c5-4988-44e4-90ec-5a5b0edabf49",
   "metadata": {},
   "outputs": [],
   "source": [
    "bscan = np.asarray(bscan)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7839593a-7578-453a-b62d-6cca3e7536cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "blurred = cv.blur(bscan,(5,5))\n",
    "plt.imshow(blurred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "31c16b1f-3323-4826-b9e9-59cac1ab61f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# edges = cv.Canny(blurred, 100, 200, L2gradient=False, apertureSize=3)\n",
    "edges = bscan > 100\n",
    "plt.subplot(121),plt.imshow(bscan,cmap = 'gray')\n",
    "plt.title('Original Image'), plt.xticks([]), plt.yticks([])\n",
    "plt.subplot(122),plt.imshow(edges,cmap = 'gray')\n",
    "plt.title('Edge Image'), plt.xticks([]), plt.yticks([])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60161ec3-49b8-4a8e-b15a-1b9818d198f1",
   "metadata": {},
   "source": [
    "### Step 1: Copy and paste the tool with the manually expanded mask\n",
    "\n",
    "Such mask is very inaccurate.\n",
    "\n",
    "TODO:\n",
    "- improve mask"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8ca9390-65dc-4244-b8fe-37afa4985cbb",
   "metadata": {},
   "source": [
    "#### 1. Expand instrument and mirroring label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8f814507-c393-4d54-87c6-82e9e0354442",
   "metadata": {},
   "outputs": [],
   "source": [
    "expanded_label = expand_label(label,\n",
    "                              instrument_label=unified_label.instrument,\n",
    "                              mirror_label=unified_label.mirror,\n",
    "                              expansion_instrument=30,\n",
    "                              expansion_mirror=0,\n",
    "                              expand_upward=True)\n",
    "plt.imshow(expanded_label)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9019804f-1915-442b-b36a-e746a9798a04",
   "metadata": {
    "tags": []
   },
   "source": [
    "#### 2. Cover the layers with the target label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8b55720a-6dcf-47da-a3fa-647dbb7ea52d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_dst_shadow(src_label, dst_label, instrument_label=2, mirror_label=4,\n",
    "                   top_layer_label=1, margin_above=0, pad_left=0, pad_right=0):\n",
    "    \"\"\"Get the shadow of the source label in the destination label, taking\n",
    "    the instrument and shadow label as well as the layer label in the destination\n",
    "    into account\n",
    "    Args:\n",
    "    overflow_above: the margin to include above the top layer. This is for the cases\n",
    "        that the human labeled top layer is inaccurate and leaves some pixels out.\n",
    "    pad_left: the number of pixels to pad to the left of the shadow. This is for the\n",
    "        that direct under of the instrument actually includes some layers.\n",
    "    pad_right: the number of pixels to pad to the right of the shadow. This is for the\n",
    "        that direct under of the instrument actually includes some layers.\n",
    "    \"\"\"\n",
    "    img_height, img_width = src_label.shape\n",
    "    shadow_x = np.array([], dtype=np.int64)\n",
    "    shadow_y = np.array([], dtype=np.int64)\n",
    "    # Requirements for the shadow label:\n",
    "    # 1. Horizontally after the starting of the instrument/mirroring & before the\n",
    "    #    ending of the instrument/mirroring\n",
    "    # 2. Vertically below the upper bound of layers\n",
    "    x_src_tool, y_src_tool = np.where(np.logical_or(src_label == instrument_label,\n",
    "                    src_label == mirror_label))  # (1024, 512)\n",
    "    if len(x_src_tool) == 0:\n",
    "        return shadow_x, shadow_y\n",
    "    left_bound = np.min(y_src_tool)\n",
    "    right_bound = np.max(y_src_tool)\n",
    "    # Detect left break and right break of the top layer, this is to adjust the left and\n",
    "    # right bound of the shadow.\n",
    "    for y in range(left_bound, img_width):\n",
    "        # If the layer continues to present to the right of left_bound below the tools,\n",
    "        # increase left_bound\n",
    "        if np.any(src_label[:, y] == top_layer_label):\n",
    "            left_bound = y\n",
    "        else:\n",
    "            break\n",
    "    for y in range(right_bound, -1, -1):\n",
    "        # If the layer continues to present to the left of right_bound below the tools,\n",
    "        # decrease right_bound\n",
    "        if np.any(src_label[:, y] == top_layer_label):\n",
    "            right_bound = y\n",
    "        else:\n",
    "            break\n",
    "    if pad_left + left_bound < right_bound:\n",
    "        left_bound += pad_left\n",
    "    if right_bound - pad_left > left_bound:\n",
    "        right_bound -= pad_right\n",
    "    accumulated_min_upperbound = 0\n",
    "    for i in range(left_bound, right_bound):\n",
    "        top_layer = np.where(dst_label[:, i] == top_layer_label)[0]\n",
    "        if len(top_layer) == 0:\n",
    "            if accumulated_min_upperbound == 0:\n",
    "                continue\n",
    "            else:\n",
    "                # set to current recorded highest layer\n",
    "                top_layer_upperbound = accumulated_min_upperbound\n",
    "        else:\n",
    "            # print(\"instrument_above\", instrument_above, len(instrument_above))\n",
    "            top_layer_upperbound = np.min(top_layer)\n",
    "            if top_layer_upperbound - margin_above > 0:\n",
    "                top_layer_upperbound -= margin_above\n",
    "            if accumulated_min_upperbound == 0:\n",
    "                # initialize\n",
    "                accumulated_min_upperbound = top_layer_upperbound\n",
    "            else:\n",
    "                accumulated_min_upperbound = min(\n",
    "                    accumulated_min_upperbound, top_layer_upperbound)\n",
    "        x_vertical = np.arange(top_layer_upperbound,\n",
    "                               img_height)  # upperbound to bottom\n",
    "        y_vertical = np.full_like(x_vertical, i)\n",
    "        shadow_x = np.concatenate([shadow_x, x_vertical])\n",
    "        shadow_y = np.concatenate([shadow_y, y_vertical])\n",
    "    return shadow_x, shadow_y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "75cba313-aba3-465a-80be-511eb9eada7c",
   "metadata": {},
   "outputs": [],
   "source": [
    "shadow_x, shadow_y = get_dst_shadow(expanded_label, dst_label, instrument_label=unified_label.instrument,\n",
    "                                    mirror_label=unified_label.mirror, top_layer_label=unified_label.ilm,\n",
    "                                    margin_above=5, pad_left=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5dafa838-0acc-4eea-a91b-b6239e8823ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "mask = np.full(label.shape, False)\n",
    "classes_of_interest = [unified_label.instrument, unified_label.mirror]\n",
    "for c in classes_of_interest:\n",
    "    mask[expanded_label==c] = True\n",
    "mask[shadow_x, shadow_y] = True\n",
    "plt.imshow(mask)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30304e39-7584-42b3-b339-562fb9c096a3",
   "metadata": {
    "tags": []
   },
   "source": [
    "#### 3. Copy and past"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5e44cc21-cf7c-4976-b0ca-b4689a6d2af7",
   "metadata": {},
   "outputs": [],
   "source": [
    "dst_bscan = np.asarray(dst_bscan)\n",
    "bscan = np.asarray(bscan)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "28d16f1e-d6fb-4901-8505-6ca0b65f4f3c",
   "metadata": {},
   "outputs": [],
   "source": [
    "cross_bscan = dst_bscan.copy()\n",
    "cross_bscan[mask] = bscan[mask]\n",
    "# cross_bscan = np.ma.array(cross_bscan, mask=mask)\n",
    "plt.imshow(cross_bscan)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33a0d01d-63be-40a6-ad2d-187e60e3f5f4",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Part 2: Manipulate the label\n",
    "\n",
    "The goal of this part is to create the corresponding label for the first part. The intuition is that it is very precise to manipulate on the label map. Then we can generate a image from the manipulated label map."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7dc54dfd-503d-4e1c-bcbd-512c766ce07b",
   "metadata": {},
   "outputs": [],
   "source": [
    "cross_bscan, cross_label = create_crossover(bscan, label, dst_bscan, dst_label, mask)\n",
    "visualize_segmentation(cross_bscan, cross_label, show_original=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7811397b-a185-431d-b37a-df8a91150502",
   "metadata": {},
   "source": [
    "## Part 3: Create a dataset\n",
    "\n",
    "Per requirements to the [pix2pix](https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix/blob/master/docs/datasets.md#pix2pix-datasets), we have to create the dataset and place it using a certain format.\n",
    "\n",
    "The ideal way is to implement a custom sampler [link](https://discuss.pytorch.org/t/how-to-generate-random-pairs-at-each-epoch/112065/2).\n",
    "\n",
    "Here I'll do it in a simpler way.\n",
    "1. Randomly choose a OP and an AROI image\n",
    "2. Create a mask based on the OP and the AROI image\n",
    "3. Make the cross over label and bscan\n",
    "4. Save to disk"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f261aba-52c9-4085-b2c9-1ee8d626ae42",
   "metadata": {},
   "source": [
    "### 1. Create a pair"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "343d52a1-8d07-4655-80e7-5db8e486cfcd",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tqdm import tqdm\n",
    "import random\n",
    "\n",
    "op_bscan_folder = \"data/ioct/bscans/\"\n",
    "op_label_folder = \"data/ioct/labels/\"\n",
    "aroi_bscan_folder = \"data/aroi/bscans/\"\n",
    "aroi_label_folder = \"data/aroi/labels/\"\n",
    "def sample(src_bscan_prefix, src_label_prefix, dst_bscan_prefix, bscan_label_prefix, n_pairs=1000):\n",
    "    \"\"\"\n",
    "    Sample pairs of source and target images. Source is where we will cut the instruments and\n",
    "    mirrorings, destination is where we want to preserve the layers. The passed in prefixs are\n",
    "    expected to directly contain paired images respectively.\n",
    "    \n",
    "    Returns:\n",
    "        pairs (list(tuple)): a list of tuples of paths [(src_bscan, src_label, dst_bscan, dst_label)]\n",
    "    \"\"\"\n",
    "    pairs = []\n",
    "    src_bscans = glob(os.path.join(src_bscan_prefix, '*'))\n",
    "    src_labels = glob(os.path.join(src_label_prefix, '*'))\n",
    "    dst_bscans = glob(os.path.join(dst_bscan_prefix, '*'))\n",
    "    dst_labels = glob(os.path.join(dst_label_prefix, '*'))\n",
    "    assert len(src_bscans) == len(src_labels) and len(src_bscans) != 0, f\"Length mismatch for bscans and labels ({len(src_bscans)}!={len(src_labels)})\"\n",
    "    assert len(dst_bscans) == len(dst_labels) and len(dst_bscans) != 0, f\"Length mismatch for bscans and labels ({len(dst_bscans)}!={len(dst_labels)})\"\n",
    "    for _ in tqdm(range(n_pairs)):\n",
    "        src_idx = random.randrange(len(src_bscans))\n",
    "        dst_idx = random.randrange(len(dst_bscans))\n",
    "        src_bscan = src_bscans[src_idx]\n",
    "        src_label = src_labels[src_idx]\n",
    "        dst_bscan = dst_bscans[dst_idx]\n",
    "        dst_label = dst_labels[dst_idx]\n",
    "        pairs.append((src_bscan, src_label, dst_bscan, dst_label))\n",
    "    return pairs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6da1d1be-4658-4bd8-9bf3-50a8daf15eb8",
   "metadata": {},
   "outputs": [],
   "source": [
    "sampled_pairs = {}\n",
    "for split, n_pairs in zip(['train', 'val'], [3000, 300]):\n",
    "    src_bscan_prefix = op_bscan_folder + split\n",
    "    src_label_prefix = op_label_folder + split\n",
    "    dst_bscan_prefix = aroi_bscan_folder + split\n",
    "    dst_label_prefix = aroi_label_folder + split\n",
    "    sampled_pairs[split] = sample(src_bscan_prefix, src_label_prefix, dst_bscan_prefix, dst_label_prefix, n_pairs)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27e920fb-19fc-4739-b1f2-88807d868f0a",
   "metadata": {},
   "source": [
    "### 2. Create a mask for a pair"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "14a316fe-30d7-4b97-9adf-ec72e4da007e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_as_array(img_path, label_type=None):\n",
    "    \"\"\"Load the image from a path to a numpy array\n",
    "    If label type is set, it will convert and unify the label.\n",
    "    label_type accepts None or op or aroi\n",
    "    \"\"\"\n",
    "    img = Image.open(img_path)\n",
    "    img_arr = np.asarray(img)\n",
    "    if label_type == 'op':\n",
    "        img_arr = unify_label(img_arr, src_labels=op_label, dst_labels=unified_label)\n",
    "    elif label_type == 'aroi':\n",
    "        img_arr = unify_label(img_arr, src_labels=aroi_label, dst_labels=unified_label, remove_list=[80, 160, 240])\n",
    "    return img_arr\n",
    "\n",
    "def create_mask(src_bscan, src_label, dst_bscan, dst_label):\n",
    "    # 2. expand source label\n",
    "    expanded_src_label = expand_label(src_label,\n",
    "                                      instrument_label=unified_label.instrument,\n",
    "                                      mirror_label=unified_label.mirror,\n",
    "                                      expansion_instrument=30,\n",
    "                                      expansion_mirror=0,\n",
    "                                      expand_upward=True)\n",
    "    # 3. get shadowed area based on the dst label\n",
    "    shadow_x, shadow_y = get_dst_shadow(expanded_src_label,\n",
    "                                        dst_label,\n",
    "                                        instrument_label=unified_label.instrument,\n",
    "                                        mirror_label=unified_label.mirror,\n",
    "                                        top_layer_label=unified_label.ilm,\n",
    "                                        margin_above=20,\n",
    "                                        pad_left=0,\n",
    "                                        pad_right=0)\n",
    "    # 4. create the mask\n",
    "    mask = np.full(src_bscan.shape, False)\n",
    "    classes_of_interest = [unified_label.instrument, unified_label.mirror]\n",
    "    for c in classes_of_interest:\n",
    "        mask[expanded_src_label==c] = True\n",
    "    mask[shadow_x, shadow_y] = True\n",
    "    return mask"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "890bca7a-e098-4c2e-91e6-385c9b4d3229",
   "metadata": {},
   "source": [
    "### 3. Create cross over bscan and label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e107fd92-5234-4030-b12a-df302f151470",
   "metadata": {},
   "outputs": [],
   "source": [
    "sampled_pair = sampled_pairs['train'][43]\n",
    "print(sampled_pair)\n",
    "src_bscan_path, src_label_path, dst_bscan_path, dst_label_path = sampled_pair\n",
    "loaded_pair = (\n",
    "    load_as_array(src_bscan_path),\n",
    "    load_as_array(src_label_path, label_type='op'),\n",
    "    load_as_array(dst_bscan_path),\n",
    "    load_as_array(dst_label_path, label_type='aroi')    \n",
    ")\n",
    "mask = create_mask(*loaded_pair)\n",
    "cross_bscan, cross_label = create_crossover(*loaded_pair, mask)\n",
    "visualize_segmentation(cross_bscan, cross_label, show_original=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a6ca8cc-b8a2-4286-be19-50f108574b78",
   "metadata": {},
   "outputs": [],
   "source": [
    "plot_horizontal(loaded_pair+(cross_bscan, cross_label, mask),\n",
    "                ['s_bscan', 's_label', 'd_bscan', 'd_label', 'c_bscan', 'c_label', 'mask'],\n",
    "                figsize=(15, 4))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82832d88-95dc-4d3d-9230-058787b81c33",
   "metadata": {},
   "source": [
    "### 4. Mass produce a dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d479d5fd-595f-473e-ae53-db486386c7ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "!mkdir -p 'data/cross/labels/train'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9ca3a3c5-03a4-4ff3-ba6b-8a26ea197bfa",
   "metadata": {},
   "outputs": [],
   "source": [
    "from os.path import basename\n",
    "\n",
    "bscan_dir = 'data/cross/bscans/'\n",
    "label_dir = 'data/cross/labels/'\n",
    "def create_cross_pair(src_bscan_path, src_label_path, dst_bscan_path, dst_label_path):\n",
    "    loaded_pair = (\n",
    "        load_as_array(src_bscan_path),\n",
    "        load_as_array(src_label_path, label_type='op'),\n",
    "        load_as_array(dst_bscan_path),\n",
    "        load_as_array(dst_label_path, label_type='aroi')    \n",
    "    )\n",
    "    mask = create_mask(*loaded_pair)\n",
    "    cross_bscan, cross_label = create_crossover(*loaded_pair, mask)\n",
    "    return cross_bscan, cross_label\n",
    "\n",
    "for split in ['train', 'val']:\n",
    "    sampled_pair = sampled_pairs[split]\n",
    "    for pair in tqdm(sampled_pair):\n",
    "        cross_bscan, cross_label = create_cross_pair(*pair)\n",
    "        cross_bscan = Image.fromarray(cross_bscan, mode='L')\n",
    "        cross_label = Image.fromarray(cross_label, mode='L')\n",
    "        img_name = basename(pair[0]).split('.')[-2] + '-' + basename(pair[2]).split('.')[-2] + '.png'\n",
    "        cross_bscan.save(os.path.join(bscan_dir, split, img_name))\n",
    "        cross_label.save(os.path.join(label_dir, split, img_name))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5c5c4f6f-c873-4458-bfc4-f836d7a33617",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
